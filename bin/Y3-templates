#!/usr/bin/env python

"""Evaluate the Y3 templates.

* gather the coadds
time $HOME/code/desihub/rrevaluator/bin/Y3-templates --gather-coadds --inputsample=iron-cumulative-vi-all
time $HOME/code/desihub/rrevaluator/bin/Y3-templates --gather-coadds --inputsample=iron-cumulative-vi-main
time $HOME/code/desihub/rrevaluator/bin/Y3-templates --gather-coadds --inputsample=iron-pernight-vi-all
time $HOME/code/desihub/rrevaluator/bin/Y3-templates --gather-coadds --inputsample=iron-pernight-vi-main

* Run Redrock
time $HOME/code/desihub/rrevaluator/bin/Y3-templates --run-redrock --inputsample=iron-vi-all --templates=PCA-iron
time $HOME/code/desihub/rrevaluator/bin/Y3-templates --run-redrock --inputsample=iron-vi-main --templates=PCA-iron


salloc -N 1 -C gpu -A desi -t 04:00:00 --qos interactive

* Build zvz QA:
time $HOME/code/desihub/rrevaluator/bin/Y3-templates --redshift-qa --rrmethod=NMF
time $HOME/code/desihub/rrevaluator/bin/Y3-templates --outliers-qa --rrmethod=NMF --overwrite

* Summarize the results.
time $HOME/code/desihub/rrevaluator/bin/Y3-templates --summarize --rrmethod=NMF

"""
import os, time, pdb
import numpy as np
import fitsio
from glob import glob
from astropy.table import Table, vstack, join

from desitarget import geomask

from desiutil.log import get_logger
log = get_logger()

#import matplotlib.pyplot as plt
#import matplotlib.ticker as ticker
import seaborn as sns
sns.set(context='talk', style='ticks', font_scale=0.9, palette='Set2')
#sns.set(context='talk', style='ticks', palette='deep', font_scale=font_scale)#, rc=rc)
colors = sns.color_palette()

# redshift scan models / priors
zscan_priors = {
    '01': '-0.005,1.7,3e-4',
    '02': '-0.005,4.0,3e-4'
    }


def read_inputsample(inputsample, projectdir='.'):
    """Read the given sample.

    """
    from rrevaluator.io import read_vi

    specprod = 'iron'

    sampledir = os.path.join(projectdir, 'sample')
    if not os.path.isdir(sampledir):
        os.makedirs(sampledir, exist_ok=True)

    if inputsample == 'iron-cumulative-vi-all':
        coadd_type = 'cumulative'
        sample = read_vi(samplefile=os.path.join(sampledir, 'sample-iron-vi-all.fits'))
    elif inputsample == 'iron-pernight-vi-all':
        coadd_type = 'pernight'
        sample = read_vi(samplefile=os.path.join(sampledir, 'sample-iron-vi-all.fits'))
    elif inputsample == 'iron-cumulative-vi-main':
        coadd_type = 'cumulative'
        sample = read_vi(main=True, samplefile=os.path.join(sampledir, 'sample-iron-vi-main.fits'))
    elif inputsample == 'iron-pernight-vi-main':
        coadd_type = 'pernight'
        sample = read_vi(main=True, samplefile=os.path.join(sampledir, 'sample-iron-vi-main.fits'))
    elif inputsample == 'iron-cumulative-main':
        coadd_type = 'cumulative'
        #sample = read_vi(main=True, samplefile=os.path.join(sampledir, 'sample-iron-vi-main.fits'))
    elif inputsample == 'iron-redqso':
        coadd_type = 'cumulative'
    else:
        raise ValueError(f'Input sample {inputsample} not recognized.')

    return sample, specprod, coadd_type


def gather_coadds(inputsample, projectdir='.', pernight=False, overwrite=False):
    """Gather the coadded spectra for the given sample.

    """
    from desispec.io import read_spectra, write_spectra

    outdir = os.path.join(projectdir, 'coadds', inputsample)
    if not os.path.isdir(outdir):
        os.makedirs(outdir, exist_ok=True)

    sample, specprod, coadd_type = read_inputsample(inputsample, projectdir=projectdir)

    for tileid in sorted(set(sample['TILEID'])):
        T = tileid == sample['TILEID']
        petals = sample['FIBER'][T] // 500
        for petal in sorted(set(petals)):
            P = petal == petals
            targetids = sample[T][P]['TARGETID'].data

            origdir = os.path.join(os.getenv('DESI_ROOT'), 'spectro', 'redux', specprod, 'tiles', coadd_type, str(tileid))
            if coadd_type == 'cumulative':
                coaddfile = os.path.join(outdir, f'coadd-{petal}-{tileid}.fits')
                if not os.path.isfile(coaddfile) or overwrite:
                    orig_coaddfile = glob(os.path.join(origdir, '*', f'coadd-{petal}-{tileid}-thru*.fits'))[0]
                    spec = read_spectra(orig_coaddfile, targetids=targetids)
                    assert(np.all(spec.target_ids() == targetids))
                    log.info(f'Writing {len(targetids)} targets to {coaddfile}')
                    write_spectra(coaddfile, spec)
                else:
                    log.info(f'Skipping existing file {coaddfile}')
            elif coadd_type == 'pernight':
                nightdirs = glob(os.path.join(origdir, '????????'))
                for nightdir in nightdirs:
                    night = os.path.basename(nightdir)
                    coaddfile = os.path.join(outdir, f'coadd-{petal}-{tileid}-{night}.fits')
                    if not os.path.isfile(coaddfile) or overwrite:
                        orig_coaddfile = os.path.join(nightdir, f'coadd-{petal}-{tileid}-{night}.fits')
                        # not all pernight petals exist
                        if os.path.isfile(orig_coaddfile):
                            spec = read_spectra(orig_coaddfile, targetids=targetids)
                            assert(np.all(spec.target_ids() == targetids))
                            log.info(f'Writing {len(targetids)} targets to {coaddfile}')
                            write_spectra(coaddfile, spec)
                    else:
                        log.info(f'Skipping existing file {coaddfile}')


def run_redrock(inputsample, projectdir='.', templates='PCA-Iron', zscan_prior='zscan01', overwrite=False):
    """Run Redrock on the input sample.

    """
    from redrock.results import read_zscan, write_zscan
    
    sample, specprod, coadd_type = read_inputsample(inputsample, projectdir=projectdir)

    redrockrun = f'{templates}-{zscan_prior}'

    outdir = os.path.join(projectdir, 'redrock', inputsample, redrockrun)
    if not os.path.isdir(outdir):
        os.makedirs(outdir, exist_ok=True)

    # old templates - just copy over the relevant files
    if templates == 'PCA-Iron':
        for tileid in sorted(set(sample['TILEID'])):
            T = tileid == sample['TILEID']
            petals = sample['FIBER'][T] // 500
            for petal in sorted(set(petals)):
                P = petal == petals
                targetids = sample[T][P]['TARGETID'].data

                redrockfile = os.path.join(outdir, f'redrock-{petal}-{tileid}.fits')
                rrdetailsfile = os.path.join(outdir, f'rrdetails-{petal}-{tileid}.h5')
                if not os.path.isfile(redrockfile) or overwrite:
                    origdir = os.path.join(os.getenv('DESI_ROOT'), 'spectro', 'redux', specprod, 'tiles', 'cumulative', str(tileid))
                    orig_redrockfile = glob(os.path.join(origdir, '*', f'redrock-{petal}-{tileid}-thru*.fits'))[0]
                    origdir = os.path.dirname(orig_redrockfile)
                    thrunight = os.path.basename(origdir)
                    orig_rrdetailsfile = os.path.join(origdir, f'rrdetails-{petal}-{tileid}-thru{thrunight}.h5')

                    alltargetids = fitsio.read(orig_redrockfile, ext='REDSHIFTS', columns='TARGETID')
                    rows = np.where(np.isin(alltargetids, targetids))[0]

                    zbest = fitsio.read(orig_redrockfile, ext='REDSHIFTS', rows=rows)
                    fm = fitsio.read(orig_redrockfile, ext='FIBERMAP', rows=rows)

                    I = geomask.match_to(zbest['TARGETID'], targetids)
                    zbest = zbest[I]
                    fm = fm[I]
                    assert(np.all(zbest['TARGETID'] == targetids))
                    assert(np.all(fm['TARGETID'] == targetids))
        
                    log.info(f'Writing {redrockfile}')
                    fitsio.write(redrockfile, zbest, extname='REDSHIFTS', clobber=True)
                    fitsio.write(redrockfile, fm, extname='FIBERMAP')

                    zscan, zfit = read_zscan(orig_rrdetailsfile, select_targetids=targetids)
                    assert(np.all(np.unique(zfit['targetid']) == targetids))
                    log.info(f'Writing {rrdetailsfile}')
                    write_zscan(rrdetailsfile, zscan, zfit, clobber=True)

                    for afterprefix, extname in zip(['qso_qn', 'qso_mgii', 'emline'], ['QN_RR', 'MGII', 'EMLINEFIT']):
                        orig_afterfile = os.path.join(origdir, f'{afterprefix}-{petal}-{tileid}-thru{thrunight}.fits')
                        afterfile = os.path.join(outdir, f'{afterprefix}-{petal}-{tileid}.fits')

                        after = fitsio.read(orig_afterfile, rows=rows, ext=extname)
                        after = after[I]
                        assert(np.all(after['TARGETID'] == targetids))

                        log.info(f'Writing {afterfile}')
                        fitsio.write(afterfile, after, extname=extname, clobber=True)
                else:
                    log.info(f'Skipping existing file {redrockfile}')


def gather_redrock(inputsample, projectdir='.', overwrite=False):
    """Gather the coadded spectra for the given sample.

    """
    from desispec.validredshifts import validate

    # VI tiles - iron
    out_zcatfile = os.path.join(projectdir, f'zcat-vitiles-templates-{specprod}.fits')
    if not os.path.isfile(out_zcatfile) or overwrite:
        # read and validate the iron results
            
        zcatdir = os.path.join(projectdir, f'redux-templates-{specprod}', 'vitiles')
        if not os.path.isdir(zcatdir):
            os.makedirs(zcatdir, exist_ok=True)
    
        vi = read_vi()
        
        for tileid in sorted(set(vi['TILEID'])):
            T = tileid == vi['TILEID']
            petals = vi['FIBER'][T] // 500
            for petal in sorted(set(petals)):
                P = petal == petals
                targetids = vi[T][P]['TARGETID'].data
    
                zcatfile = os.path.join(zcatdir, f'zcat-{specprod}-{petal}-{tileid}.fits')
                if not os.path.isfile(zcatfile) or overwrite:
                    orig_redrockfile = glob(os.path.join(os.getenv('DESI_ROOT'), 'spectro', 'redux', specprod, 'tiles',
                                                         'cumulative', str(tileid), '*', f'redrock-{petal}-{tileid}-thru*.fits'))[0]
    
                    zcat = validate(orig_redrockfile, return_target_columns=True,
                                    extra_columns=['TARGETID', 'Z', 'Z_RR', 'ZWARN', 'COADD_FIBERSTATUS', 'SPECTYPE', 'DELTACHI2'])
                    zcat = zcat[geomask.match_to(zcat['TARGETID'], targetids)]
                    assert(np.all(zcat['TARGETID'] == targetids))
                    zcat.write(zcatfile, overwrite=True)
                    log.info(f'Wrote {len(zcat)} objects to {zcatfile}')

        # now gather everything up and write out the merged catalog
        zcatfiles = glob(os.path.join(zcatdir, f'zcat-{specprod}-[0-9]-?????.fits'))
        zcat = vstack([Table(fitsio.read(zcatfile)) for zcatfile in zcatfiles])
        zcat = join(zcat, vi, keys='TARGETID')
        zcat.write(out_zcatfile, overwrite=True)
        log.info(f'Wrote {len(zcat):,d} objects to {out_zcatfile}')

#            redrockfile = os.path.join(outdir, f'redrock-{petal}-{tileid}.fits')
#            rrdetailsfile = os.path.join(outdir, f'rrdetails-{petal}-{tileid}.h5')
#            if not os.path.isfile(redrockfile) or overwrite:
#                #cmd = f'-i {coaddfile} -o {redrockfile} -d {rrdetailsfile} --mp 24'
#                #cmd = f'-i {coaddfile} -o {redrockfile} --mp 24'
#                cmd = f'-i {coaddfile} -o {redrockfile} '
#                if rrdetails:
#                    cmd += f' -d {rrdetailsfile}'
#                if zscan_galaxy is not None:
#                    cmd += f' --zscan-galaxy={zscan_galaxy}'
#                if write_slurm:
#                    with open(slurmfile, 'a') as S:
#                        S.write(f'cmd="srun -n {ntasks} -c {cpus_per_task} rrdesi --negflux-nsig=5 --gpu --max-gpuprocs={max_gpuprocs} {cmd}"\n')
#                        S.write('echo $cmd\n')
#                        S.write('$cmd\n')
#                else:
#                    log.info(f'rrdesi {cmd} --gpu')
#                    rrdesi(cmd.split())
#            else:
#                log.info(f'Skipping existing file {redrockfile}')
#
#            # validate to create the summary catalog
#            if not write_slurm:
#                zcatfile = os.path.join(outdir, f'zcat-{petal}-{tileid}.fits')
#                zcat = validate(redrockfile, return_target_columns=True, 
#                                extra_columns=['TARGETID', 'Z', 'Z_RR', 'ZWARN', 'COADD_FIBERSTATUS', 'SPECTYPE', 'DELTACHI2'])
#                zcat.write(zcatfile, overwrite=True)
#                log.info(f'Wrote {len(zcat)} objects to {zcatfile}')
#


def main():
    """Main wrapper."""

    import argparse

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('--projectdir', default=None, help='Top-level output directory.')
    parser.add_argument('--templatedir', default=None, help='Template location.')
    parser.add_argument('--targetclass', default=None, type=str, help='Target class to process')
    parser.add_argument('--mp', default=1, type=int, help='Number of multiprocessing processes per MPI rank or node.')
    parser.add_argument('--zscan-prior', default='zscan01', type=str, help='Galaxy redshift scan prior.')

    parser.add_argument('--inputsample', choices=['iron-cumulative-vi-all', 'iron-cumulative-vi-main',
                                                  'iron-pernight-vi-all', 'iron-pernight-vi-main',
                                                  'iron-cumulative-main', 'iron-redqso'],
                        type=str, help='Input sample to analyze.')
    parser.add_argument('--templates', choices=['PCA-Iron'],
                        type=str, help='Redrock templates.')

    parser.add_argument('--gather-coadds', action='store_true', help='Gather the coadded spectra.')
    parser.add_argument('--run-redrock', action='store_true', help='Gather the coadded spectra.')
    parser.add_argument('--gather-redrock', action='store_true', help='Gather the Redrock fitting results.')

    parser.add_argument('--overwrite', action='store_true', help='Overwrite existing files.')
    args = parser.parse_args()

    if args.projectdir is None:
        args.projectdir = os.path.join(os.getenv('DESI_ROOT'), 'users', 'ioannis', 'Y3-templates')
        
    if not os.path.isdir(args.projectdir):
        os.makedirs(args.projectdir, exist_ok=True)

    # https://docs.nersc.gov/development/languages/python/parallel-python/#use-the-spawn-start-method
    if args.mp > 1 and 'NERSC_HOST' in os.environ:
        import multiprocessing
        multiprocessing.set_start_method('spawn')

    if args.targetclass is not None:
        targetclasses = [args.targetclass]
    else:
        targetclasses = ['BGS', 'LRG', 'ELG', 'QSO']

    # gather the coadds
    if args.gather_coadds:
        gather_coadds(inputsample=args.inputsample, projectdir=args.projectdir, overwrite=args.overwrite)
        
    # run Redrock
    if args.run_redrock:
        run_redrock(inputsample=args.inputsample, projectdir=args.projectdir, templates=args.templates,
                    zscan_prior=args.zscan_prior, overwrite=args.overwrite)
        
    # gather the Redrock fitting results
    if args.gather_redrock:
        gather_redrock(inputsample=args.inputsample, projectdir=args.projectdir, overwrite=args.overwrite)
        
if __name__ == '__main__':
    main()
    
